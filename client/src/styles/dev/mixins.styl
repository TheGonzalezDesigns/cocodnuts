gradient(color)
	rate = 40%
	background-image: linear-gradient(to bottom right, lighten(color, rate), darken(color, rate))


shadowMaker(iterations, blur, color)
	$shadows = '0 0 0 transparent'
	for i in 1..iterations
		$shadows += ', %spx %spx' % (i i) blur color


longShadow(iterations = 10, blur = 0, color = rgba(0, 0, 0, .5))
	text-shadow unquote(shadowMaker(iterations, blur, color))


shade(color = #333)
	longShadow(color: rgba(color, 0.08), iterations: 9, blur: 4px)


random(min,max)
	return floor(math(0, 'random')*(max - min + 1) + min)

highlight()
	r = random(0, 255)
	g = random(0, 255)
	b = random(0, 255)
	color = rgba(r, g, b, 0.25)
	if (dev.highlight)
		background-color color
genLan(src, sets, width)
	taux = width/sets
	minWidth = round(taux)
	source = src + '?size=' + minWidth
	background-image url(source)
	for set in (1..sets)
		minWidth = round(taux * set)
		@media only screen and (orientation: landscape) and (min-width: unit(minWidth, 'px'))
			set += set < sets ? 1 : 0
			minWidth = round(taux * set)
			source = src + '?size=' + minWidth
			background-image url(source)
genPor(src, sets, height)
	taux = height/sets
	minHeight = round(taux)
	source = src + '?size=' + minHeight
	background-image url(source)
	for set in (1..sets)
		minHeight = round(taux * set)
		@media only screen and (orientation: portrait) and (min-height: unit(minHeight, 'px'))
			set += set < sets ? 1.5 : 0
			minHeight = round(taux * set)
			source = src + '?size=' + minHeight
			background-image url(source)
			background-position-x right
srcsets(src, sets, width, height, wane = 0)
	sets = sets ? sets : 1
	wane = wane < sets ? wane > 0 ? wane : 0 : sets - 1
	sets -= wane
	decrease = sets * 0.1
	width -= width * decrease
	height -= height * decrease
	genLan(src, sets, width)
	genPor(src, sets, height)
genH(min, max, unit = 'rem')
	range = 14
	for i in (1..range)
		rate = (i - 1) * 1/range
		max -= max * rate
		min -= min * rate
		max = unit(max, unit)
		min = unit(min, unit)
		class = '.h' + i
		{class}
			font-size responsive min max
animate(name, start, end)
	startKeys = keys(start)
	endKeys = keys(end)
	startValues = values(start)
	endValues = values(end)
	.{name}-enter-active
	.{name}-leave-active
		@extend .transition
		for i in (1..6)
			background red
	.{name}-enter
	.{name}-leave-to
		for i in (1..6)
			background red
